/**
 * ******************************************************************************************
 * LEMBRETE!!!
 * PADRONIZAR CAMPOS: DEFINIR CAMPOS DE ACORDO COM A NECESSIDADE DE SER OBRIGATÓRIO OU NÃO
 * ******************************************************************************************
 */

generator client {
    provider = "prisma-client-js"
    output   = "../generated/prisma"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model Notification {
    id        String    @id @default(auto()) @map("_id") @db.ObjectId
    type      String?
    activity  String?
    createdAt DateTime? @default(now())

    clientId String? @db.ObjectId
    client   Client? @relation(fields: [clientId], references: [id])

    restaurantId String?     @db.ObjectId
    restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])

    adminId String? @db.ObjectId
    admin   Admin?  @relation(fields: [adminId], references: [id])
}

model Review {
    id         String    @id @default(auto()) @map("_id") @db.ObjectId
    rating     Int
    comment    String?
    clientName String?
    tags       String[]
    createdAt  DateTime? @default(now())
    updatedAt  DateTime? @updatedAt

    // Relations
    clientId String? @db.ObjectId
    client   Client? @relation(fields: [clientId], references: [id])

    restaurantId String?     @db.ObjectId
    restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
}

model Subscription {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    status        String    @default("Pending") // pending, active, cancelled
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    endsAt        DateTime?
    planType      String
    paymentMethod String

    // Relations
    restaurantId String     @db.ObjectId
    restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
}

model Tables {
    id     String  @id @default(auto()) @map("_id") @db.ObjectId
    seats  String?
    status String? // Available, Reserved

    // Relations
    reservation Reservations[]

    restaurantId String     @db.ObjectId
    restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
}

model Reservations {
    id             String    @id @default(auto()) @map("_id") @db.ObjectId
    date           DateTime? // Day of the reservation
    time           String?
    day            String?
    month          String?
    guests         Int?
    status         String? // Pending, Active, Canceled
    notes          String?
    createdAt      DateTime? @default(now())
    updatedAt      DateTime? @updatedAt
    clientName     String?
    restaurantName String?

    // Client Relations
    clientId String @db.ObjectId
    client   Client @relation(fields: [clientId], references: [id])

    // Restaurant Relations
    restaurantId String     @db.ObjectId
    restaurant   Restaurant @relation(fields: [restaurantId], references: [id])

    // Tables Relations
    tableId String @db.ObjectId
    table   Tables @relation(fields: [tableId], references: [id])
}

model Admin {
    id            String   @id @default(auto()) @map("_id") @db.ObjectId
    type          String   @default("admin")
    email         String   @unique
    name          String?
    password      String?
    phone         String?
    fullAddress   String?
    avatar        String?
    prevMonthInfo String[]

    notification Notification[]
}

model Restaurant {
    id          String    @id @default(auto()) @map("_id") @db.ObjectId
    type        String    @default("restaurant") // user or restaurant
    email       String    @unique
    name        String
    password    String
    cnpj        String // CNPJ is a unique identifier for Brazilian companies. Use @unique if needed.
    fullAddress String?
    phone       String?
    status      String?   @default("Pending")
    isActive    Boolean?  @default(true)
    opensAt     String?
    closesAt    String?
    mapsUrl     String?
    description String?
    avatar      String?
    menu        String?
    tags        String[]
    rating      Float?    @default(0)
    ratingCount Int?      @default(0)
    createdAt   DateTime? @default(now())
    updatedAt   DateTime? @updatedAt

    // Relations
    reservations  Reservations[]
    // Pesquisar como estabelecer uma relação um para um com subscription!!!!!!!!!!!!!!!!!!!!!!!!
    subscriptions Subscription[]
    review        Review[]
    tables        Tables[]
    notification  Notification[]
}

model Client {
    id                String    @id @default(auto()) @map("_id") @db.ObjectId
    type              String    @default("client") // user or restaurant
    email             String    @unique
    name              String
    password          String
    phone             String?
    avatar            String?
    restaurantHistory String[]
    createdAt         DateTime? @default(now())
    updatedAt         DateTime? @updatedAt

    // Relations
    reservations Reservations[]
    review       Review[]
    notification Notification[]
}
